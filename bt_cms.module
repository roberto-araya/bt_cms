<?php

use Drupal\Core\Field\BaseFieldDefinition;
use \Drupal\user\Entity\User;
use \Drupal\personas\PersonaUtility;
use \Drupal\Core\Url;
/**
 * Implements hook_menu_local_actions_alter().
 */
function bt_cms_menu_local_actions_alter(&$local_actions) {
    $local_actions['node.add_page']['appears_on'][0] = 'page_manager.page_view_app_website_content_app_website_content-panels_variant-0';
    $local_actions['node.add_page']['appears_on'][1] = 'page_manager.page_view_app_website_content_app_website_content-panels_variant-1';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function bt_cms_menu_local_tasks_alter(&$data, $route_name) {
    $current_user = \Drupal::service('current_user');
    $user_id = $current_user->id();
    $user_account = User::load($user_id);

    $routes = [
        'page_manager.page_view_app_app-panels_variant-0',
        'bt_page_drag_and_drop',
        'page_manager.page_view_app_website_app_website-panels_variant-0',
        'page_manager.page_view_app_website_content_app_website_content-panels_variant-0',
        'page_manager.page_view_app_website_content_app_website_content-panels_variant-1',
        'page_manager.page_view_app_website_comments_app_website_comments-panels_variant-0',
        'page_manager.page_view_app_website_documents_app_website_documents-panels_variant-0',
        'page_manager.page_view_app_website_documents_app_website_documents-panels_variant-1',
        'page_manager.page_view_app_website_media_app_website_media-panels_variant-0',
        'page_manager.page_view_app_website_media_app_website_media-panels_variant-1',
        'page_manager.page_view_app_website_polls_app_website_polls-panels_variant-0',
        'page_manager.page_view_app_website_forums_app_website_forums-panels_variant-0',
        'page_manager.page_view_app_website_faq_app_website_faq-panels_variant-0',
        'page_manager.page_view_app_website_blocks_app_website_blocks-panels_variant-0'
    ];

    if (in_array($route_name, $routes)) {
        if (PersonaUtility::hasPersona($user_account, 'bt_content_editor_publisher')){
            unset($data['tabs'][0]['bt_website_content_writer_task']);
            unset($data['tabs'][1]['bt_website_content_writer_default_task']);
            unset($data['tabs'][0]['bt_website_documents_writer_task']);
            unset($data['tabs'][0]['bt_website_media_writer_task']);
        }elseif(PersonaUtility::hasPersona($user_account, 'bt_content_creator')){
            unset($data['tabs'][0]['bt_website_content_admin_task']);
            unset($data['tabs'][1]['bt_website_content_admin_default_task']);
            unset($data['tabs'][0]['bt_website_documents_admin_task']);
            unset($data['tabs'][0]['bt_website_media_admin_task']);
        }
    }
}

/**
 * Implements hook_ENTITY_TYPE_alter().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
/*function bt_cms_media_insert(\Drupal\Core\Entity\EntityInterface $entity) {
    // Convert to lowercase, trim spaces, replace spaces with underscore and then truncate to 60 chars.
    $pathTitle = substr(str_replace(" ","-",trim(strtolower($entity->label()))),0,60);
    switch($entity->bundle()) {
        case 'bt_documents':
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/edit', "/document/" . $pathTitle . '/edit', "en");
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/delete', "/document/" . $pathTitle . '/delete', "en");
            break;
        case 'bt_image_gallery':
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/edit', "/gallery/" . $pathTitle . '/edit', "en");
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/delete', "/gallery/" . $pathTitle . '/delete', "en");
            break;
        case 'images':
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/edit', "/image/" . $pathTitle . '/edit', "en");
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/delete', "/image/" . $pathTitle . '/delete', "en");
            break;
        case 'slideshow':
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/edit', "/slideshow/" . $pathTitle . '/edit', "en");
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/delete', "/slideshow/" . $pathTitle . '/delete', "en");
            break;
        case 'bt_video':
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/edit', "/video/" . $pathTitle . '/edit', "en");
            \Drupal::service('path.alias_storage')->save("/media/" . $entity->id() . '/delete', "/video/" . $pathTitle . '/delete', "en");
            break;
    }
}*/

function bt_cms_entity_base_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {
    if ($entity_type->id() == 'node') {
        if (isset($fields['title'])) {
            $fields['title']->setDisplayConfigurable('view', TRUE);
        }
    }
   // Alter the mymodule_text field to use a custom class.
    if ($entity_type->id() == 'block_content') {
        $fields['info']->setLabel('Block Name');
        $fields['info']->setDescription('The name by which the block will be displayed in the list of custom blocks.');
    }
}

/**
 * Implements hook_entity_bundle_field_info()
 */
/*function bt_cms_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
    if ($entity_type->id() == 'media') {
        if (in_array($bundle, ['bt_documents', 'image', 'bt_image_gallery', 'slideshow', 'bt_video'])) {
            $fields = array();
            $fields['name'] = BaseFieldDefinition::create('string');
            switch ($bundle) {
                case 'bt_documents':
                    $fields['name']->setLabel(t('Document name'))
                        ->setDescription(t('The name by which you will identify the document in your document library.'));
                    break;
                case 'image':
                    $fields['name']->setLabel(t('Image name'))
                        ->setDescription(t('The name by which you will identify the image in your media library.'));
                    break;
                case 'bt_image_gallery':
                    $fields['name']->setLabel(t('Gallery name'))
                    ->setDescription(t('The name by which you will identify the gallery in your media library.'));
                    break;
                case 'slideshow':
                    $fields['name']->setLabel(t('Slideshow name'))
                    ->setDescription(t('The name by which you will identify the slideshow in your media library.'));
                    break;
                case 'bt_video':
                    $fields['name']->setLabel(t('Video name'))
                    ->setDescription(t('The name by which you will identify the video in your media library.'));
                    break;
            }
            $fields['name']->setRequired(TRUE)
                ->setTranslatable(TRUE)
                ->setRevisionable(TRUE)
                ->setDefaultValue('')
                ->setSetting('max_length', 255)
                ->setDisplayOptions('form', [
                    'type' => 'string_textfield',
                    'weight' => -5,
                ])
                ->setDisplayConfigurable('form', TRUE)
                ->setDisplayOptions('view', [
                    'label' => 'hidden',
                    'type' => 'string',
                    'weight' => -5,
                ])
                ->setDisplayConfigurable('view', TRUE);

            return $fields;
        }
    }
}*/

/**
 * Implements hook_entity_type_alter().
 */
function bt_cms_entity_type_alter(array &$entity_types) {
    $entity_types['node']->setHandlerClass('route_provider', ['html' => 'Drupal\bt_cms\AlterNodeRouteProvider']);
    $entity_types['node']->setHandlerClass('view_builder', 'Drupal\bt_cms\CustomNodeViewBuilder');
}

function bt_cms_node_links_alter(&$links, $entity, &$context) {
    if ($entity->getEntityTypeId() == 'node') {
        $bundle = $entity->bundle();
        $view_mode = $context['view_mode'];
        $links['#theme'] = 'links__'. $bundle . '_' . $view_mode;
    }
}